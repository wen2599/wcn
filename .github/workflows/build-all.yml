# ==============================================================================
#  GitHub Action: Build and Create Release on Main Branch Update
#
#  This workflow is based on your provided structure. It triggers on every push
#  to 'main', builds a signed release APK, and uses ncipollo/release-action
#  to create a new GitHub Release.
# ==============================================================================

name: Build and Create Release on Main Update

on:
  push:
    branches:
      - main 

jobs:
  build-and-release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: 1. Checkout Repository
        uses: actions/checkout@v4

      - name: 2. Set up JDK and Node.js
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: 3. Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: 4. Install All Dependencies
        run: |
          npm install
          cd frontend
          npm install
          cd ..

      - name: 5. Build Frontend Web App
        # ======================= 核心修正 =======================
        # 移除了 -w frontend 参数，改用 cd 命令进入目录执行，避免 "No workspaces found" 错误。
        run: |
          cd frontend
          npm run build
          cd ..
        # ===================== 修改结束 =====================
      
      - name: 6. Capacitor Sync
        run: npx cap sync android

      - name: 7. Decode and Place Keystore
        run: echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > my-release-key.keystore
      
      - name: 8. Grant execute permission for gradlew
        run: chmod +x android/gradlew

      - name: 9. Generate Versioning Info
        id: versioning
        run: |
          echo "version_name=dev-$(date +'%Y%m%d')-${{ github.sha_short }}" >> $GITHUB_OUTPUT
          echo "version_code=${{ github.run_number }}" >> $GITHUB_OUTPUT

      - name: 10. Build Signed Release APK
        working-directory: ./android
        run: |
          ./gradlew assembleRelease \
            -PappVersionCode=${{ steps.versioning.outputs.version_code }} \
            -PappVersionName=${{ steps.versioning.outputs.version_name }} \
            -Pandroid.injected.signing.store.file="${{ github.workspace }}/my-release-key.keystore" \
            -Pandroid.injected.signing.store.password="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" \
            -Pandroid.injected.signing.key.alias="${{ secrets.ANDROID_KEY_ALIAS }}" \
            -Pandroid.injected.signing.key.password="${{ secrets.ANDROID_KEYSTORE_PASSWORD }}"

      - name: 11. Rename APK for better identification
        run: mv android/app/build/outputs/apk/release/app-release.apk android/app/build/outputs/apk/release/摆牌-${{ steps.versioning.outputs.version_name }}.apk

      - name: 12. Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: release-${{ github.sha }}
          name: "自动构建 - ${{ github.event.head_commit.message }}"
          artifacts: "android/app/build/outputs/apk/release/*.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          prerelease: true
          body: |
            这是由 GitHub Actions 自动构建和发布的版本。
            **Commit**: `${{ github.sha }}`
            **版本名**: `${{ steps.versioning.outputs.version_name }}`
            **版本代码**: `${{ steps.versioning.outputs.version_code }}`
